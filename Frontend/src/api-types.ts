/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/ingredients/": {
    /**
     * Get All Ingredients
     * @description Return all ingredients.
     */
    get: operations["get_all_ingredients_api_ingredients__get"];
    /**
     * Add Ingredient
     * @description Create a new ingredient.
     */
    post: operations["add_ingredient_api_ingredients__post"];
  };
  "/api/ingredients/possible_tags": {
    /**
     * Get All Possible Tags
     * @description Return all possible ingredient tags ordered by name.
     */
    get: operations["get_all_possible_tags_api_ingredients_possible_tags_get"];
    /**
     * Add Possible Tag
     * @description Create a new possible ingredient tag, or return existing on duplicate name.
     */
    post: operations["add_possible_tag_api_ingredients_possible_tags_post"];
  };
  "/api/ingredients/{ingredient_id}": {
    /**
     * Get Ingredient
     * @description Retrieve a single ingredient by ID.
     */
    get: operations["get_ingredient_api_ingredients__ingredient_id__get"];
    /**
     * Update Ingredient
     * @description Update an existing ingredient.
     *
     * Important: Avoid deleting existing units on update to preserve referential
     * integrity for rows in food_ingredients that reference them. Instead,
     * upsert provided units (update by id or insert new). Existing units not in
     * the payload are left unchanged.
     */
    put: operations["update_ingredient_api_ingredients__ingredient_id__put"];
    /**
     * Delete Ingredient
     * @description Delete an ingredient.
     */
    delete: operations["delete_ingredient_api_ingredients__ingredient_id__delete"];
  };
  "/api/foods/": {
    /**
     * Get All Foods
     * @description Return all foods.
     */
    get: operations["get_all_foods_api_foods__get"];
    /**
     * Add Food
     * @description Create a new food.
     */
    post: operations["add_food_api_foods__post"];
  };
  "/api/foods/possible_tags": {
    /**
     * Get Possible Food Tags
     * @description Return all possible food tags ordered by name.
     */
    get: operations["get_possible_food_tags_api_foods_possible_tags_get"];
    /**
     * Add Possible Food Tag
     * @description Create a new possible food tag, or return existing on duplicate name.
     */
    post: operations["add_possible_food_tag_api_foods_possible_tags_post"];
  };
  "/api/foods/{food_id}": {
    /**
     * Get Food
     * @description Retrieve a single food by ID.
     */
    get: operations["get_food_api_foods__food_id__get"];
    /**
     * Update Food
     * @description Update an existing food.
     */
    put: operations["update_food_api_foods__food_id__put"];
    /**
     * Delete Food
     * @description Delete a food.
     */
    delete: operations["delete_food_api_foods__food_id__delete"];
  };
  "/api/plans/": {
    /**
     * List Plans
     * @description Return all saved plans ordered by last update descending.
     */
    get: operations["list_plans_api_plans__get"];
    /**
     * Create Plan
     * @description Persist a new plan payload.
     */
    post: operations["create_plan_api_plans__post"];
  };
  "/api/plans/{plan_id}": {
    /**
     * Get Plan
     * @description Retrieve a single plan by ID.
     */
    get: operations["get_plan_api_plans__plan_id__get"];
    /**
     * Update Plan
     * @description Update an existing plan.
     */
    put: operations["update_plan_api_plans__plan_id__put"];
    /**
     * Delete Plan
     * @description Delete an existing plan.
     */
    delete: operations["delete_plan_api_plans__plan_id__delete"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * FoodCreate
     * @description Schema for creating a food.
     */
    FoodCreate: {
      /** Name */
      name: string;
      /** Ingredients */
      ingredients?: components["schemas"]["FoodIngredientCreate"][];
      /** Tags */
      tags?: components["schemas"]["TagRef"][];
    };
    /**
     * FoodIngredient
     * @description Link between a food and an ingredient with quantity information.
     */
    FoodIngredient: {
      /** Ingredient Id */
      ingredient_id?: number | null;
      /** Food Id */
      food_id?: number | null;
      /** Unit Id */
      unit_id?: number | null;
      /** Unit Quantity */
      unit_quantity?: number | null;
    };
    /**
     * FoodIngredientCreate
     * @description Schema for creating food ingredient linkage.
     */
    FoodIngredientCreate: {
      /** Ingredient Id */
      ingredient_id: number;
      /** Unit Id */
      unit_id?: number | null;
      /** Unit Quantity */
      unit_quantity?: number | null;
    };
    /**
     * FoodRead
     * @description Schema for reading food data.
     */
    FoodRead: {
      /** Id */
      id: number;
      /** Name */
      name: string;
      /** Ingredients */
      ingredients?: components["schemas"]["FoodIngredient"][];
      /** Tags */
      tags?: components["schemas"]["PossibleFoodTag"][];
    };
    /**
     * FoodUpdate
     * @description Schema for updating a food.
     */
    FoodUpdate: {
      /** Name */
      name: string;
      /** Ingredients */
      ingredients?: components["schemas"]["FoodIngredientCreate"][];
      /** Tags */
      tags?: components["schemas"]["TagRef"][];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /**
     * IngredientCreate
     * @description Schema for creating an ingredient.
     */
    IngredientCreate: {
      /** Name */
      name: string;
      nutrition?: components["schemas"]["NutritionCreate"] | null;
      /** Units */
      units?: components["schemas"]["IngredientUnitCreate"][];
      /** Tags */
      tags?: components["schemas"]["TagRef"][];
      /** Shopping Unit Id */
      shopping_unit_id?: number | null;
      shopping_unit?: components["schemas"]["IngredientShoppingUnitSelection"] | null;
    };
    /**
     * IngredientRead
     * @description Schema for reading ingredient data.
     */
    IngredientRead: {
      /** Id */
      id: number;
      /** Name */
      name: string;
      nutrition?: components["schemas"]["Nutrition"] | null;
      /** Units */
      units?: components["schemas"]["IngredientUnit"][];
      /** Tags */
      tags?: components["schemas"]["PossibleIngredientTag"][];
      /** Shopping Unit Id */
      shopping_unit_id?: number | null;
      shopping_unit?: components["schemas"]["IngredientUnit"] | null;
    };
    /**
     * IngredientShoppingUnitSelection
     * @description Payload for selecting a preferred shopping unit.
     */
    IngredientShoppingUnitSelection: {
      /** Unit Id */
      unit_id?: number | null;
      /** Name */
      name?: string | null;
      /** Grams */
      grams?: number | null;
    };
    /**
     * IngredientUnit
     * @description Measurement unit for an ingredient.
     */
    IngredientUnit: {
      /** Id */
      id?: number | null;
      /** Ingredient Id */
      ingredient_id?: number | null;
      /** Name */
      name: string;
      /** Grams */
      grams: number;
    };
    /**
     * IngredientUnitCreate
     * @description Schema for creating ingredient unit data.
     */
    IngredientUnitCreate: {
      /** Name */
      name: string;
      /** Grams */
      grams: number;
    };
    /**
     * IngredientUnitUpdate
     * @description Schema for updating ingredient unit data (allows id for upsert).
     */
    IngredientUnitUpdate: {
      /** Id */
      id?: number | null;
      /** Name */
      name: string;
      /** Grams */
      grams: number;
    };
    /**
     * IngredientUpdate
     * @description Schema for updating an ingredient.
     */
    IngredientUpdate: {
      /** Name */
      name: string;
      nutrition?: components["schemas"]["NutritionCreate"] | null;
      /** Units */
      units?: components["schemas"]["IngredientUnitUpdate"][];
      /** Tags */
      tags?: components["schemas"]["TagRef"][];
      /** Shopping Unit Id */
      shopping_unit_id?: number | null;
      shopping_unit?: components["schemas"]["IngredientShoppingUnitSelection"] | null;
    };
    /**
     * Nutrition
     * @description Nutritional information for a single ingredient.
     */
    Nutrition: {
      /** Id */
      id?: number | null;
      /** Ingredient Id */
      ingredient_id?: number | null;
      /** Calories */
      calories: number;
      /** Fat */
      fat: number;
      /** Carbohydrates */
      carbohydrates: number;
      /** Protein */
      protein: number;
      /** Fiber */
      fiber: number;
    };
    /**
     * NutritionCreate
     * @description Schema for creating nutrition data.
     */
    NutritionCreate: {
      /** Calories */
      calories: number;
      /** Fat */
      fat: number;
      /** Carbohydrates */
      carbohydrates: number;
      /** Protein */
      protein: number;
      /** Fiber */
      fiber: number;
    };
    /**
     * PlanCreate
     * @description Payload required to persist a plan.
     */
    PlanCreate: {
      /** Label */
      label: string;
      /** Payload */
      payload: {
        [key: string]: unknown;
      };
    };
    /**
     * PlanRead
     * @description Representation of a saved plan returned from the API.
     */
    PlanRead: {
      /** Id */
      id: number;
      /** Label */
      label: string;
      /** Payload */
      payload: {
        [key: string]: unknown;
      };
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * PlanUpdate
     * @description Fields allowed when updating a persisted plan.
     */
    PlanUpdate: {
      /** Label */
      label?: string | null;
      /** Payload */
      payload?: {
        [key: string]: unknown;
      } | null;
    };
    /**
     * PossibleFoodTag
     * @description Tag that can be associated with a food.
     */
    PossibleFoodTag: {
      /** Id */
      id?: number | null;
      /** Name */
      name: string;
    };
    /**
     * PossibleIngredientTag
     * @description Tag that can be associated with an ingredient.
     */
    PossibleIngredientTag: {
      /** Id */
      id?: number | null;
      /** Name */
      name: string;
    };
    /**
     * TagCreate
     * @description Schema for creating a new possible tag by name.
     */
    TagCreate: {
      /** Name */
      name: string;
    };
    /**
     * TagRef
     * @description Reference to an existing tag by ID.
     */
    TagRef: {
      /** Id */
      id: number;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get All Ingredients
   * @description Return all ingredients.
   */
  get_all_ingredients_api_ingredients__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["IngredientRead"][];
        };
      };
    };
  };
  /**
   * Add Ingredient
   * @description Create a new ingredient.
   */
  add_ingredient_api_ingredients__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["IngredientCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["IngredientRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get All Possible Tags
   * @description Return all possible ingredient tags ordered by name.
   */
  get_all_possible_tags_api_ingredients_possible_tags_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PossibleIngredientTag"][];
        };
      };
    };
  };
  /**
   * Add Possible Tag
   * @description Create a new possible ingredient tag, or return existing on duplicate name.
   */
  add_possible_tag_api_ingredients_possible_tags_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TagCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["PossibleIngredientTag"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Ingredient
   * @description Retrieve a single ingredient by ID.
   */
  get_ingredient_api_ingredients__ingredient_id__get: {
    parameters: {
      path: {
        ingredient_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["IngredientRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Ingredient
   * @description Update an existing ingredient.
   *
   * Important: Avoid deleting existing units on update to preserve referential
   * integrity for rows in food_ingredients that reference them. Instead,
   * upsert provided units (update by id or insert new). Existing units not in
   * the payload are left unchanged.
   */
  update_ingredient_api_ingredients__ingredient_id__put: {
    parameters: {
      path: {
        ingredient_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IngredientUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["IngredientRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Ingredient
   * @description Delete an ingredient.
   */
  delete_ingredient_api_ingredients__ingredient_id__delete: {
    parameters: {
      path: {
        ingredient_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get All Foods
   * @description Return all foods.
   */
  get_all_foods_api_foods__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FoodRead"][];
        };
      };
    };
  };
  /**
   * Add Food
   * @description Create a new food.
   */
  add_food_api_foods__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FoodCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["FoodRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Possible Food Tags
   * @description Return all possible food tags ordered by name.
   */
  get_possible_food_tags_api_foods_possible_tags_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PossibleFoodTag"][];
        };
      };
    };
  };
  /**
   * Add Possible Food Tag
   * @description Create a new possible food tag, or return existing on duplicate name.
   */
  add_possible_food_tag_api_foods_possible_tags_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TagCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["PossibleFoodTag"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Food
   * @description Retrieve a single food by ID.
   */
  get_food_api_foods__food_id__get: {
    parameters: {
      path: {
        food_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FoodRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Food
   * @description Update an existing food.
   */
  update_food_api_foods__food_id__put: {
    parameters: {
      path: {
        food_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FoodUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FoodRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Food
   * @description Delete a food.
   */
  delete_food_api_foods__food_id__delete: {
    parameters: {
      path: {
        food_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Plans
   * @description Return all saved plans ordered by last update descending.
   */
  list_plans_api_plans__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PlanRead"][];
        };
      };
    };
  };
  /**
   * Create Plan
   * @description Persist a new plan payload.
   */
  create_plan_api_plans__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlanCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["PlanRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Plan
   * @description Retrieve a single plan by ID.
   */
  get_plan_api_plans__plan_id__get: {
    parameters: {
      path: {
        plan_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PlanRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Plan
   * @description Update an existing plan.
   */
  update_plan_api_plans__plan_id__put: {
    parameters: {
      path: {
        plan_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlanUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PlanRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Plan
   * @description Delete an existing plan.
   */
  delete_plan_api_plans__plan_id__delete: {
    parameters: {
      path: {
        plan_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
