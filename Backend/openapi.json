{
  "openapi": "3.1.0",
  "info": {
    "title": "FastAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/api/ingredients/": {
      "get": {
        "tags": [
          "ingredients"
        ],
        "summary": "Get All Ingredients",
        "description": "Return all ingredients.",
        "operationId": "get_all_ingredients_api_ingredients__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/IngredientRead"
                  },
                  "type": "array",
                  "title": "Response Get All Ingredients Api Ingredients  Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ingredients"
        ],
        "summary": "Add Ingredient",
        "description": "Create a new ingredient.",
        "operationId": "add_ingredient_api_ingredients__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngredientCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngredientRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/ingredients/possible_tags": {
      "get": {
        "tags": [
          "ingredients"
        ],
        "summary": "Get All Possible Tags",
        "description": "Return all possible ingredient tags ordered by name.",
        "operationId": "get_all_possible_tags_api_ingredients_possible_tags_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PossibleIngredientTag"
                  },
                  "type": "array",
                  "title": "Response Get All Possible Tags Api Ingredients Possible Tags Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ingredients"
        ],
        "summary": "Add Possible Tag",
        "description": "Create a new possible ingredient tag, or return existing on duplicate name.",
        "operationId": "add_possible_tag_api_ingredients_possible_tags_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PossibleIngredientTag"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/ingredients/{ingredient_id}": {
      "get": {
        "tags": [
          "ingredients"
        ],
        "summary": "Get Ingredient",
        "description": "Retrieve a single ingredient by ID.",
        "operationId": "get_ingredient_api_ingredients__ingredient_id__get",
        "parameters": [
          {
            "name": "ingredient_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Ingredient Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngredientRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ingredients"
        ],
        "summary": "Update Ingredient",
        "description": "Update an existing ingredient.\n\nImportant: Avoid deleting existing units on update to preserve referential\nintegrity for rows in food_ingredients that reference them. Instead,\nupsert provided units (update by id or insert new). Existing units not in\nthe payload are left unchanged.",
        "operationId": "update_ingredient_api_ingredients__ingredient_id__put",
        "parameters": [
          {
            "name": "ingredient_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Ingredient Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngredientUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IngredientRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ingredients"
        ],
        "summary": "Delete Ingredient",
        "description": "Delete an ingredient.",
        "operationId": "delete_ingredient_api_ingredients__ingredient_id__delete",
        "parameters": [
          {
            "name": "ingredient_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Ingredient Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Delete Ingredient Api Ingredients  Ingredient Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/foods/": {
      "get": {
        "tags": [
          "foods"
        ],
        "summary": "Get All Foods",
        "description": "Return all foods.",
        "operationId": "get_all_foods_api_foods__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FoodRead"
                  },
                  "type": "array",
                  "title": "Response Get All Foods Api Foods  Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "foods"
        ],
        "summary": "Add Food",
        "description": "Create a new food.",
        "operationId": "add_food_api_foods__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FoodCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FoodRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/foods/possible_tags": {
      "get": {
        "tags": [
          "foods"
        ],
        "summary": "Get Possible Food Tags",
        "description": "Return all possible food tags ordered by name.",
        "operationId": "get_possible_food_tags_api_foods_possible_tags_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PossibleFoodTag"
                  },
                  "type": "array",
                  "title": "Response Get Possible Food Tags Api Foods Possible Tags Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "foods"
        ],
        "summary": "Add Possible Food Tag",
        "description": "Create a new possible food tag, or return existing on duplicate name.",
        "operationId": "add_possible_food_tag_api_foods_possible_tags_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PossibleFoodTag"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/foods/{food_id}": {
      "get": {
        "tags": [
          "foods"
        ],
        "summary": "Get Food",
        "description": "Retrieve a single food by ID.",
        "operationId": "get_food_api_foods__food_id__get",
        "parameters": [
          {
            "name": "food_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Food Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FoodRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "foods"
        ],
        "summary": "Update Food",
        "description": "Update an existing food.",
        "operationId": "update_food_api_foods__food_id__put",
        "parameters": [
          {
            "name": "food_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Food Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FoodUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FoodRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "foods"
        ],
        "summary": "Delete Food",
        "description": "Delete a food.",
        "operationId": "delete_food_api_foods__food_id__delete",
        "parameters": [
          {
            "name": "food_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Food Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Delete Food Api Foods  Food Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/plans/": {
      "get": {
        "tags": [
          "plans"
        ],
        "summary": "List Plans",
        "description": "Return all saved plans ordered by last update descending.",
        "operationId": "list_plans_api_plans__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PlanRead"
                  },
                  "type": "array",
                  "title": "Response List Plans Api Plans  Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "plans"
        ],
        "summary": "Create Plan",
        "description": "Persist a new plan payload.",
        "operationId": "create_plan_api_plans__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/plans/{plan_id}": {
      "get": {
        "tags": [
          "plans"
        ],
        "summary": "Get Plan",
        "description": "Retrieve a single plan by ID.",
        "operationId": "get_plan_api_plans__plan_id__get",
        "parameters": [
          {
            "name": "plan_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Plan Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "plans"
        ],
        "summary": "Update Plan",
        "description": "Update an existing plan.",
        "operationId": "update_plan_api_plans__plan_id__put",
        "parameters": [
          {
            "name": "plan_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Plan Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "plans"
        ],
        "summary": "Delete Plan",
        "description": "Delete an existing plan.",
        "operationId": "delete_plan_api_plans__plan_id__delete",
        "parameters": [
          {
            "name": "plan_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Plan Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/stored_food/": {
      "post": {
        "tags": [
          "stored_food"
        ],
        "summary": "Create Stored Food",
        "description": "Persist a new stored food entry.",
        "operationId": "create_stored_food_api_stored_food__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoredFoodCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoredFoodRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "stored_food"
        ],
        "summary": "List Stored Food",
        "description": "Retrieve stored food entries with optional filters.",
        "operationId": "list_stored_food_api_stored_food__get",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          },
          {
            "name": "only_available",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Only Available"
            }
          },
          {
            "name": "day",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Day"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StoredFoodRead"
                  },
                  "title": "Response List Stored Food Api Stored Food  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/stored_food/{stored_food_id}/consume": {
      "post": {
        "tags": [
          "stored_food"
        ],
        "summary": "Consume Stored Food",
        "description": "Consume portions from a stored food entry.",
        "operationId": "consume_stored_food_api_stored_food__stored_food_id__consume_post",
        "parameters": [
          {
            "name": "stored_food_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Stored Food Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoredFoodConsume"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoredFoodRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/logs/{log_date}": {
      "get": {
        "tags": [
          "logs"
        ],
        "summary": "List Daily Logs",
        "description": "Return all log entries for a specific day.",
        "operationId": "list_daily_logs_api_logs__log_date__get",
        "parameters": [
          {
            "name": "log_date",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date",
              "title": "Log Date"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DailyLogEntryRead"
                  },
                  "title": "Response List Daily Logs Api Logs  Log Date  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/logs/": {
      "post": {
        "tags": [
          "logs"
        ],
        "summary": "Create Daily Log",
        "description": "Persist a new daily log entry.",
        "operationId": "create_daily_log_api_logs__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DailyLogEntryCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DailyLogEntryRead"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "DailyLogEntryCreate": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "log_date": {
            "type": "string",
            "format": "date",
            "title": "Log Date"
          },
          "stored_food_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stored Food Id"
          },
          "ingredient_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ingredient Id"
          },
          "food_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Food Id"
          },
          "portions_consumed": {
            "type": "number",
            "title": "Portions Consumed"
          },
          "calories": {
            "type": "number",
            "title": "Calories"
          },
          "protein": {
            "type": "number",
            "title": "Protein"
          },
          "carbohydrates": {
            "type": "number",
            "title": "Carbohydrates"
          },
          "fat": {
            "type": "number",
            "title": "Fat"
          },
          "fiber": {
            "type": "number",
            "title": "Fiber"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "log_date",
          "portions_consumed",
          "calories",
          "protein",
          "carbohydrates",
          "fat",
          "fiber"
        ],
        "title": "DailyLogEntryCreate",
        "description": "Schema for creating a new daily log entry."
      },
      "DailyLogEntryRead": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "log_date": {
            "type": "string",
            "format": "date",
            "title": "Log Date"
          },
          "stored_food_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stored Food Id"
          },
          "ingredient_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ingredient Id"
          },
          "food_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Food Id"
          },
          "portions_consumed": {
            "type": "number",
            "title": "Portions Consumed"
          },
          "calories": {
            "type": "number",
            "title": "Calories"
          },
          "protein": {
            "type": "number",
            "title": "Protein"
          },
          "carbohydrates": {
            "type": "number",
            "title": "Carbohydrates"
          },
          "fat": {
            "type": "number",
            "title": "Fat"
          },
          "fiber": {
            "type": "number",
            "title": "Fiber"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "log_date",
          "portions_consumed",
          "calories",
          "protein",
          "carbohydrates",
          "fat",
          "fiber",
          "id",
          "created_at"
        ],
        "title": "DailyLogEntryRead",
        "description": "Schema returned when reading daily log entries."
      },
      "FoodCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "ingredients": {
            "items": {
              "$ref": "#/components/schemas/FoodIngredientCreate"
            },
            "type": "array",
            "title": "Ingredients"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/TagRef"
            },
            "type": "array",
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "FoodCreate",
        "description": "Schema for creating a food."
      },
      "FoodIngredient": {
        "properties": {
          "ingredient_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ingredient Id"
          },
          "food_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Food Id"
          },
          "unit_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit Id"
          },
          "unit_quantity": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit Quantity"
          }
        },
        "type": "object",
        "title": "FoodIngredient",
        "description": "Link between a food and an ingredient with quantity information."
      },
      "FoodIngredientCreate": {
        "properties": {
          "ingredient_id": {
            "type": "integer",
            "title": "Ingredient Id"
          },
          "unit_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit Id"
          },
          "unit_quantity": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit Quantity"
          }
        },
        "type": "object",
        "required": [
          "ingredient_id"
        ],
        "title": "FoodIngredientCreate",
        "description": "Schema for creating food ingredient linkage."
      },
      "FoodRead": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "ingredients": {
            "items": {
              "$ref": "#/components/schemas/FoodIngredient"
            },
            "type": "array",
            "title": "Ingredients"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/PossibleFoodTag"
            },
            "type": "array",
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "title": "FoodRead",
        "description": "Schema for reading food data."
      },
      "FoodUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "ingredients": {
            "items": {
              "$ref": "#/components/schemas/FoodIngredientCreate"
            },
            "type": "array",
            "title": "Ingredients"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/TagRef"
            },
            "type": "array",
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "FoodUpdate",
        "description": "Schema for updating a food."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "IngredientCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "nutrition": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NutritionCreate"
              },
              {
                "type": "null"
              }
            ]
          },
          "units": {
            "items": {
              "$ref": "#/components/schemas/IngredientUnitCreate"
            },
            "type": "array",
            "title": "Units"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/TagRef"
            },
            "type": "array",
            "title": "Tags"
          },
          "shopping_unit_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shopping Unit Id"
          },
          "shopping_unit": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IngredientShoppingUnitSelection"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "IngredientCreate",
        "description": "Schema for creating an ingredient."
      },
      "IngredientRead": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "nutrition": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Nutrition"
              },
              {
                "type": "null"
              }
            ]
          },
          "units": {
            "items": {
              "$ref": "#/components/schemas/IngredientUnit"
            },
            "type": "array",
            "title": "Units"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/PossibleIngredientTag"
            },
            "type": "array",
            "title": "Tags"
          },
          "shopping_unit_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shopping Unit Id"
          },
          "shopping_unit": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IngredientUnit"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "title": "IngredientRead",
        "description": "Schema for reading ingredient data."
      },
      "IngredientShoppingUnitSelection": {
        "properties": {
          "unit_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "grams": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grams"
          }
        },
        "type": "object",
        "title": "IngredientShoppingUnitSelection",
        "description": "Payload for selecting a preferred shopping unit."
      },
      "IngredientUnit": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "ingredient_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ingredient Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "grams": {
            "type": "number",
            "title": "Grams"
          }
        },
        "type": "object",
        "required": [
          "name",
          "grams"
        ],
        "title": "IngredientUnit",
        "description": "Measurement unit for an ingredient."
      },
      "IngredientUnitCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "grams": {
            "type": "number",
            "title": "Grams"
          }
        },
        "type": "object",
        "required": [
          "name",
          "grams"
        ],
        "title": "IngredientUnitCreate",
        "description": "Schema for creating ingredient unit data."
      },
      "IngredientUnitUpdate": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "grams": {
            "type": "number",
            "title": "Grams"
          }
        },
        "type": "object",
        "required": [
          "name",
          "grams"
        ],
        "title": "IngredientUnitUpdate",
        "description": "Schema for updating ingredient unit data (allows id for upsert)."
      },
      "IngredientUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "nutrition": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NutritionCreate"
              },
              {
                "type": "null"
              }
            ]
          },
          "units": {
            "items": {
              "$ref": "#/components/schemas/IngredientUnitUpdate"
            },
            "type": "array",
            "title": "Units"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/TagRef"
            },
            "type": "array",
            "title": "Tags"
          },
          "shopping_unit_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shopping Unit Id"
          },
          "shopping_unit": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IngredientShoppingUnitSelection"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "IngredientUpdate",
        "description": "Schema for updating an ingredient."
      },
      "Nutrition": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "ingredient_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ingredient Id"
          },
          "calories": {
            "type": "number",
            "title": "Calories"
          },
          "fat": {
            "type": "number",
            "title": "Fat"
          },
          "carbohydrates": {
            "type": "number",
            "title": "Carbohydrates"
          },
          "protein": {
            "type": "number",
            "title": "Protein"
          },
          "fiber": {
            "type": "number",
            "title": "Fiber"
          }
        },
        "type": "object",
        "required": [
          "calories",
          "fat",
          "carbohydrates",
          "protein",
          "fiber"
        ],
        "title": "Nutrition",
        "description": "Nutritional information for a single ingredient."
      },
      "NutritionCreate": {
        "properties": {
          "calories": {
            "type": "number",
            "title": "Calories"
          },
          "fat": {
            "type": "number",
            "title": "Fat"
          },
          "carbohydrates": {
            "type": "number",
            "title": "Carbohydrates"
          },
          "protein": {
            "type": "number",
            "title": "Protein"
          },
          "fiber": {
            "type": "number",
            "title": "Fiber"
          }
        },
        "type": "object",
        "required": [
          "calories",
          "fat",
          "carbohydrates",
          "protein",
          "fiber"
        ],
        "title": "NutritionCreate",
        "description": "Schema for creating nutrition data."
      },
      "PlanCreate": {
        "properties": {
          "label": {
            "type": "string",
            "title": "Label"
          },
          "payload": {
            "additionalProperties": true,
            "type": "object",
            "title": "Payload"
          }
        },
        "type": "object",
        "required": [
          "label",
          "payload"
        ],
        "title": "PlanCreate",
        "description": "Payload required to persist a plan."
      },
      "PlanRead": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "payload": {
            "additionalProperties": true,
            "type": "object",
            "title": "Payload"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "label",
          "payload",
          "created_at",
          "updated_at"
        ],
        "title": "PlanRead",
        "description": "Representation of a saved plan returned from the API."
      },
      "PlanUpdate": {
        "properties": {
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label"
          },
          "payload": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payload"
          }
        },
        "type": "object",
        "title": "PlanUpdate",
        "description": "Fields allowed when updating a persisted plan."
      },
      "PossibleFoodTag": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "PossibleFoodTag",
        "description": "Tag that can be associated with a food."
      },
      "PossibleIngredientTag": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "PossibleIngredientTag",
        "description": "Tag that can be associated with an ingredient."
      },
      "StoredFoodConsume": {
        "properties": {
          "portions": {
            "type": "number",
            "title": "Portions"
          }
        },
        "type": "object",
        "required": [
          "portions"
        ],
        "title": "StoredFoodConsume",
        "description": "Payload for consuming stored food portions."
      },
      "StoredFoodCreate": {
        "properties": {
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label"
          },
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "food_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Food Id"
          },
          "ingredient_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ingredient Id"
          },
          "prepared_portions": {
            "type": "number",
            "title": "Prepared Portions"
          },
          "per_portion_calories": {
            "type": "number",
            "title": "Per Portion Calories"
          },
          "per_portion_protein": {
            "type": "number",
            "title": "Per Portion Protein"
          },
          "per_portion_carbohydrates": {
            "type": "number",
            "title": "Per Portion Carbohydrates"
          },
          "per_portion_fat": {
            "type": "number",
            "title": "Per Portion Fat"
          },
          "per_portion_fiber": {
            "type": "number",
            "title": "Per Portion Fiber"
          },
          "remaining_portions": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Remaining Portions"
          },
          "prepared_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prepared At"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "prepared_portions",
          "per_portion_calories",
          "per_portion_protein",
          "per_portion_carbohydrates",
          "per_portion_fat",
          "per_portion_fiber"
        ],
        "title": "StoredFoodCreate",
        "description": "Schema for creating stored food entries."
      },
      "StoredFoodRead": {
        "properties": {
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label"
          },
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "food_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Food Id"
          },
          "ingredient_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ingredient Id"
          },
          "prepared_portions": {
            "type": "number",
            "title": "Prepared Portions"
          },
          "per_portion_calories": {
            "type": "number",
            "title": "Per Portion Calories"
          },
          "per_portion_protein": {
            "type": "number",
            "title": "Per Portion Protein"
          },
          "per_portion_carbohydrates": {
            "type": "number",
            "title": "Per Portion Carbohydrates"
          },
          "per_portion_fat": {
            "type": "number",
            "title": "Per Portion Fat"
          },
          "per_portion_fiber": {
            "type": "number",
            "title": "Per Portion Fiber"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "remaining_portions": {
            "type": "number",
            "title": "Remaining Portions"
          },
          "is_finished": {
            "type": "boolean",
            "title": "Is Finished"
          },
          "prepared_at": {
            "type": "string",
            "format": "date-time",
            "title": "Prepared At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "prepared_portions",
          "per_portion_calories",
          "per_portion_protein",
          "per_portion_carbohydrates",
          "per_portion_fat",
          "per_portion_fiber",
          "id",
          "remaining_portions",
          "is_finished",
          "prepared_at",
          "updated_at"
        ],
        "title": "StoredFoodRead",
        "description": "Schema returned when reading stored food entries."
      },
      "TagCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "TagCreate",
        "description": "Schema for creating a new possible tag by name."
      },
      "TagRef": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "title": "TagRef",
        "description": "Reference to an existing tag by ID."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}
